import re
string = 'The roots of education are bitter, but the fruit is sweet.'
pattern = 'education'
result = re.search(pattern, string)
if result != None:
    print(True)
else:
    print(False)
start_position = result.start()
print(start_position)
end_position = result.end()
print(end_position)

Quantifier:
#? - followed by a charactor - Zero or One time
if you want to write a regex that matches both ‘car’ and ‘cars’, the corresponding regex will be ’cars?’. ‘S’ followed by ‘?’ means that ‘s’ can be absent or present, i.e. it can be present zero or one time.
pattern = 'trees?'
result = re.search(pattern,string)
if result != None:
    print(True)
else:
    print(False)

pattern = 'xy?z?'
result = re.search(pattern,string)
if result != None:
    print(True)
else:
    print(False)
----------------
#A ‘*’ quantifier matches the preceding character any number of times. Practice some questions below to strengthen your understanding of it.
pattern = '1010*'
result = re.search(pattern, string)
Write a pattern that starts with 1 and ends with zero but has arbitrary number of 1s (zero or more) in between
pattern = '1*0'
result = re.search(pattern, string)
------------
#The ‘+’ quantifier matches the preceding character one or more times.
-------------
{m, n}: Matches the preceding character ‘m’ times to ‘n’ times.
{m, }: Matches the preceding character ‘m’ times to infinite times, i.e. there is no upper limit to the occurrence of the preceding character.
{, n}: Matches the preceding character from zero to ‘n’ times, i.e. the upper limit is fixed regarding the occurrence of the preceding character.
{n}: Matches if the preceding character occurs exactly ‘n’ number of times.
result = re.search(ab{3,5},aabbbbdafdf)
abbbb
result = re.search(ab{4},aabbbbdafdf)
abbbb
An interesting thing to note is that this quantifier can replace the ‘?’, ‘*’ and the ‘+’ quantifier. That is because:

'?' is equivalent to zero or once, or {0, 1}
'*' is equivalent to zero or more times, or {0, }
'+' is equivalent to one or more times, or {1, }
pattern = 'hur{2,5}ay'

# check whether pattern is present in string or not
result = re.search(pattern,'hurrrrray')  # pass the pattern and string arguments to the function
print(result)
------------------
If you put the parentheses around some characters, the quantifier will look for repetition of the group of characters rather than just looking for repetitions of the preceding character. 
This concept is called grouping in regular expression jargon. For example, the pattern ‘(abc){1, 3}’
abc
abcabc
abcabcabc
imilarly, the pattern (010)+ will match:

010
010010
010010010,
-------------------
the pipe operator. It’s notated by ‘|’. The pipe operator is used as an OR operator. You need to use it inside the parentheses. 
For example, the pattern ‘(d|g)one’ will match both the strings - ‘done’ and ‘gone’. 
The pipe operator tells that the place inside the parentheses can be either ‘d’ or ‘g’.
‘(ICICI|HDFC) Bank’
‘(0|1|2){2} means 'exactly two occurrences of either of 0, 1 or 2',
‘00’, ‘01’, ‘02’, ‘10’, ‘11’, ‘12’, ‘20’, ‘21’ and ‘22’.
--------------------
escape sequences
Suppose you want to extract all the questions from a document, and you assume that all questions end with a question mark - ‘?’. So you would need to use the ‘?’ in the regular expression. Now, you already know that ‘?’ has a special meaning in regular expressions. So, how do you tell regular expression engine that you want to match the question mark literally in the sentence, rather than as a special character (which it is by default)? 
In situations such as these, you’ll need to use escape sequences. The escape sequence, denoted by a backslash ‘\’, is used to escape the special meaning of the special characters. To match a question mark literally, you need to use '\?' (this is called escaping the character).

Dravid, who scored 56(78), was bowled by Brett Lee after lunchtime
 Suppose, we want to extract ‘(78)’
we can’t use the pattern ‘(78)’. If we use it, we’ll get ‘78’ instead of ‘(78)’.
we’re going to use is ‘\(78\)’.
-----------------------------
 there are something called as regex flags. A flag has a special meaning. For example, if you want your regex to ignore the case of the text then you can pass the 're.I' flag. Similarly, you have can have a flag with the syntax re.M that enables you to search in multiple lines (in case the input text has multiple lines). You can pass all these flags in the re.search() function. The syntax to pass multiple flags is:
re.search(pattern, string, flags=re.I | re.M)
-----------------------------
re.compile() function
This function stores the regular expression pattern in the cache memory and is said to result in a little faster searches. You need to pass the regex pattern to re.compile() function
# without re.compile() function
result = re.search("a+", "abc")

# using the re.compile() function
pattern = re.compile("a+")
result = pattern.search("abc")
----------------------------------
anchors characters: ‘^’ and ‘$’.
The ‘^’ specifies the start of the string. The character followed by the ‘^’ in the pattern should be the first character of the string in order for a string to match the pattern.
Similarly, the ‘$’ specifies the end of the string. The character that precedes the ‘$’ in the pattern should be the last character in the string in order for the string to match the pattern.
‘^01*0$’ will match any string that starts and end with zeroes with any number of 1s between them. It will match ‘010’, ‘0110’, ‘01111111110’ and even ‘00’ 
--------------------------------
Write a regular expression that matches any string that starts with one or more ‘1’s, followed by three or more ‘0’s, followed by any number of ones (zero or more), followed by ‘0’s (from one to seven), and then ends with either two or three ‘1’s.
pattern = '^1+0{3,}1*0{1,7}1{2,3}$'
------------------------------
there is one special character in regular expressions that acts as a placeholder and can match any character (literally!) in the given input string. It’s the ‘.’ (dot) character is also called the wildcard character. 
starts with four characters, followed by three 0s and two 1s, followed by any two characters. The valid strings can be abcd00011ft, jkds00011hf, etc. 
The pattern that satisfies this kind of condition would be ‘.{4}0{3}1{2}.{2}’. 
--------------------------------------------------
Characters Sets
the pattern ‘[a-z]ed’ will match strings such as ‘ted’, ‘bed’, ‘red’ 
‘[a-z]+ed’, it will match any word that ends with ‘ed’ such as ‘watched’, ‘baked’, ‘jammed’, ‘educated’
---------------------------------------------------------
You can also mention a whitespace character inside a character set to specify one or more whitespaces inside the string. 
The pattern [A-z ] can be used to match the full name of a person. It includes a space, so it can match the full name which includes the first name, a space, and the last name of the person.
[A-z] - Ignores the case
----------------------------------
To match every other character other than the one mentioned inside the character set.
'[^abc]' it will match anything other than abc
---------------------------------------------------------
Meta Sequences
\s - All spaces
\S - Except all spaces
\d - All digits
\D - Except all digits
\w - Alphanumeric
\W - Except Alphanumeric

‘[\w\s]+’ matches both alphanumeric characters and whitespaces. The square brackets are used to group these two meta-sequences into one.
--------------------
Greedy versus Non-greedy Search
By default it will provide maximum matches - Greedy.
'1010{1,5}' it will match 10100000
Non Greedy
'1010{1,5}?' it will match 1010 even 10100000 is availble
--------------------------------
Match function:
 The match function will only match if the pattern is present at the very start of the string. On the other hand, 
the search function will look for the pattern starting from the left of the string and keeps searching until it sees 
the pattern and then returns the match.
------------
re.sub() function
street= '31 Ramakrishna Road' 
print(re.sub('R\w*','Rd',street))
31 Rd Rd

pattern = "\d"
replacement = "X"
string = "My address is 13B, Baker Street"
re.sub(pattern, replacement, string)
: "My address is XXB, Baker Street"
-----------------
re.finditer
pattern = '[A-z]{5,}'
# store results in the list 'result'
result = []
#print(string)
# iterate over the matches
for match in re.finditer(pattern,string):
    #print(match)    
    if len(match.group()) >= 5:
        result.append(match)
    else:
        continue
----------------
re,findall function
pattern = '\w+ing'
#print(string)
# store results in the list 'result'
result = re.findall(pattern,string)
#print(result)
# extract words having the required pattern, using the findall function

# evaluate result - don't change the following piece of code, it is used to evaluate your regex
print(len(result))
----------------
Group
pattern ='(\d{2})-(\d{2})-(\d{4})'

# store result
result = re.search(pattern, string)
#print(result)
# extract month using group command
if result != None:
    month = result.group(2) #To extract month
else:
    month = "NA"
--------------------------
Write a regular expression to extract the domain name from an email address. The format of the email is simple - the part before the ‘@’ symbol contains alphabets, numbers and underscores. The part after the ‘@’ symbol contains only alphabets followed by a dot followed by ‘com’ 
 
Sample input: 
user_name_123@gmail.com 
 
Expected output: 
gmail.com
pattern = '\w+@([A-z]+\.[A-z]+)'
# write regex to extract email and use groups to extract domain name ofthe mail

# store result
result = re.search(pattern, string)

# extract domain using group command
if result != None:
    domain = result.group(1)
else:
    domain = "NA"
print(domain)
-------------------------
https://regex101.com/
------------------------
# create function to chop off the suffixes 'ing' and 'ed'
Method1:
pattern='^(.*)(ing|ed)$'
    search_word=re.search(pattern,word)
    word=search_word.group(1)

Method2:
if (re.search("ing$", word)):
        word = re.sub("ing$", "", word)
    elif re.search("ed$", word):
        word = re.sub("ed$", "", word)

#To search a string in pandas column
data[data['submission'].str.contains("zip")]

#Remove strings from column 
data=data[data.Runs.apply(lambda x: x.isnumeric())]


data['result'] = data['result'].map(lambda x: x.lstrip('+-').rstrip('aAbBcC'))

import re

currency=['1200AED','AED130','USD1434','2343INR','3643','SFGKJ','ABC']
r = re.compile("^[a-zA-Z]{3}\d{3}" )
r1 = re.compile("^\d{1,}[a-zA-Z]{3}$" )
newlist = list(filter(r.match, currency))
newlist1 = list(filter(r1.match, currency)) # Read Note
print(newlist + newlist1)

import re
at = re.compile(r"-", re.I)
def count_hypen(string):
    count = 0
    for i in at.finditer(string):
        count += 1
    return count
data["Segment_Count"] = data["FIRST_SEGMENTS_DTL"].map(count_hypen)